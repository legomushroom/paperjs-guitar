// Generated by CoffeeScript 1.6.2
(function() {
  var Triangle, h, onFrame, triangle;

  Path.prototype.setWidth = function(width) {
    this.segments[3].point.x = this.segments[0].point.x + width;
    return this.segments[2].point.x = this.segments[1].point.x + width;
  };

  Path.prototype.setHeight = function(height) {
    this.segments[1].point.y = this.segments[0].point.y + height;
    return this.segments[2].point.y = this.segments[3].point.y + height;
  };

  Path.prototype.reset = function() {
    this.setWidth(0);
    this.setHeight(0);
    return this.smooth();
  };

  h = {
    getRand: function(min, max) {
      return Math.floor((Math.random() * ((max + 1) - min)) + min);
    }
  };

  view.setViewSize($(window).outerWidth(), $(window).outerHeight());

  Triangle = (function() {
    function Triangle() {
      this.trias = [];
      this.makeBase();
    }

    Triangle.prototype.makeBase = function() {
      var a, i, _i, _results;

      this.base = new Path([[view.center.x + 0, view.center.y + 10], [view.center.x + 10, view.center.y + 40], [view.center.x + 60, view.center.y + 40]]);
      this.base.fillColor = '#f1f1f1';
      this.base.closed = true;
      a = this.addTriangle(this.base);
      _results = [];
      for (i = _i = 0; _i <= 1500; i = ++_i) {
        _results.push(a = this.addTriangle(a));
      }
      return _results;
    };

    Triangle.prototype.addTriangle = function(path) {
      var base, nextColor, _ref;

      base = new Path;
      base.add(new Point({
        x: path.segments[1].point.x + h.getRand(-50, 50),
        y: path.segments[1].point.y + h.getRand(-50, 50)
      }));
      base.segments[1] = path.segments[0];
      base.segments[2] = path.segments[1];
      if ((_ref = this.color) == null) {
        this.color = h.getRand(150, 175);
      }
      nextColor = this.color - (h.getRand(-10, 10));
      base.fillColor = "rgb(" + nextColor + "," + nextColor + "," + nextColor + ")";
      this.color = nextColor;
      base.closed = true;
      this.trias.push(base);
      this.animate(base);
      return base;
    };

    Triangle.prototype.animate = function() {};

    Triangle.prototype.update = function(e) {
      return TWEEN.update();
    };

    return Triangle;

  })();

  triangle = new Triangle;

  onFrame = function(e) {
    return triangle.update();
  };

}).call(this);
