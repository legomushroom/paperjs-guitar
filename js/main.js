// Generated by CoffeeScript 1.6.2
var String, Strings, h, mouseDown, mouseDrag, mouseMove, onFrame, onMouseDown, onMouseDrag, onMouseMove, onMouseUp, strings;

Path.prototype.setWidth = function(width) {
  this.segments[3].point.x = this.segments[0].point.x + width;
  return this.segments[2].point.x = this.segments[1].point.x + width;
};

Path.prototype.setHeight = function(height) {
  this.segments[1].point.y = this.segments[0].point.y + height;
  return this.segments[2].point.y = this.segments[3].point.y + height;
};

Path.prototype.reset = function() {
  this.setWidth(0);
  this.setHeight(0);
  return this.smooth();
};

h = {
  getRand: function(min, max) {
    return Math.floor((Math.random() * ((max + 1) - min)) + min);
  }
};

view.setViewSize($(window).outerWidth(), $(window).outerHeight());

mouseDown = null;

mouseMove = null;

mouseDrag = null;

String = (function() {
  function String(o) {
    var _base, _ref;

    this.o = o;
    if ((_ref = (_base = this.o).stringsOffset) == null) {
      _base.stringsOffset = this.o.width * 20;
    }
    this.touched = false;
    this.anima = false;
    this.colors = ["#69D2E7", "#A7DBD8", "#E0E4CC", "#F38630", "#FA6900", "#C02942", "#542437", "#53777A", "#ECD078", "#FE4365"];
    this.defaultColor = "#222";
    this.makeOsc();
    this.makeBase();
  }

  String.prototype.makeOsc = function() {
    var curve1, curve2, curve3, curveLength, i, waveTable, _i, _j, _k;

    this.oscillator = this.o.context.createOscillator();
    this.gainNode = this.o.context.createGainNode();
    this.gainNode.gain.value = 0.01;
    this.oscillator.connect(this.gainNode);
    this.gainNode.connect(this.o.context.destination);
    curveLength = 100;
    curve1 = new Float32Array(curveLength);
    curve2 = new Float32Array(curveLength);
    curve3 = new Float32Array(curveLength);
    for (i = _i = 0; 0 <= curveLength ? _i < curveLength : _i > curveLength; i = 0 <= curveLength ? ++_i : --_i) {
      curve1[i] = Math.cos(Math.PI * i / curveLength) * 222;
    }
    for (i = _j = 0; 0 <= curveLength ? _j < curveLength : _j > curveLength; i = 0 <= curveLength ? ++_j : --_j) {
      curve2[i] = Math.sin(Math.PI * i / curveLength) * 222;
    }
    for (i = _k = 0; 0 <= curveLength ? _k < curveLength : _k > curveLength; i = 0 <= curveLength ? ++_k : --_k) {
      curve3[i] = Math.exp(Math.PI * i / curveLength);
    }
    waveTable = this.o.context.createWaveTable(curve1, curve2, curve3);
    return this.oscillator.setWaveTable(waveTable);
  };

  String.prototype.makeBase = function() {
    this.base = new Path;
    this.base.add([this.o.offset, -this.o.width]);
    this.base.add([this.o.offset, view.viewSize.height + this.o.width]);
    this.base.strokeColor = this.defaultColor;
    return this.base.strokeWidth = this.o.width;
  };

  String.prototype.change = function(e) {
    var point;

    if (e.delta.x > 0) {
      if (((e.point + e.delta).x >= this.o.offset) && this.o.offset > mouseDown.x) {
        this.touched = true;
      }
    }
    if (e.delta.x < 0) {
      if (((e.point - e.delta).x <= this.o.offset) && this.o.offset < mouseDown.x) {
        this.touched = true;
      }
    }
    point = e.point;
    if (!this.touched) {
      return;
    }
    if ((point.x > (this.o.offset + this.o.stringsOffset)) || (point.x < (this.o.offset - this.o.stringsOffset))) {
      this.animate();
      return;
    }
    if (this.anima) {
      return;
    }
    this.base.segments[0].handleOut.y = point.y;
    return this.base.segments[0].handleOut.x = point.x - this.o.offset;
  };

  String.prototype.animate = function() {
    this.touched = false;
    if (this.anima) {
      return;
    }
    this.anima = true;
    if (this.base.segments[0].handleOut.x === 0) {
      return;
    }
    this.soundX = parseInt(Math.abs(this.base.segments[0].handleOut.x));
    this.soundY = parseInt(Math.abs(this.base.segments[0].handleOut.y));
    this.soundY = this.soundY / (view.viewSize.height + (2 * this.o.width));
    this.animateQuake();
    this.animateColor();
    return this.makeSound();
  };

  String.prototype.animateColor = function() {
    var from, it, to, _ref;

    if ((_ref = this.twColor) != null) {
      _ref.stop();
    }
    this.base.strokeColor = this.colors[this.index % this.colors.length];
    this.base.strokeColor.saturation = this.soundY * 4;
    from = {
      t: 0
    };
    to = {
      t: 1
    };
    this.twColor = new TWEEN.Tween(from).to(to, this.soundX * 6);
    it = this;
    this.twColor.onUpdate(function() {
      it.base.strokeColor.brightness -= this.t / 8;
      if (it.base.strokeColor.brightness <= 0.1) {
        return it.base.strokeColor = it.defaultColor;
      }
    });
    return this.twColor.start();
  };

  String.prototype.animateQuake = function() {
    var from, it, to, _ref,
      _this = this;

    if ((_ref = this.tw) != null) {
      _ref.stop();
    }
    this.anima = true;
    from = {
      x: this.base.segments[0].handleOut.x,
      y: this.base.segments[0].handleOut.y,
      c: 1000 * this.index
    };
    to = {
      x: 0,
      y: 0,
      c: 0
    };
    this.tw = new TWEEN.Tween(from).to(to, 1000);
    this.tw.easing(function(t) {
      var b;

      b = Math.exp(-t * 10) * Math.cos(Math.PI * 2 * t * 10);
      if (t >= 1) {
        return 1;
      }
      return 1 - b;
    });
    it = this;
    this.tw.onUpdate(function() {
      it.base.segments[0].handleOut.x = this.x;
      return it.base.segments[0].handleOut.y = this.y;
    });
    this.tw.onComplete(function() {
      return _this.teardown();
    });
    return this.tw.start();
  };

  String.prototype.makeSound = function() {
    var from, it, to, _ref,
      _this = this;

    if ((_ref = this.twSound) != null) {
      _ref.stop();
    }
    from = {
      c: 2 * (this.index * 25) + this.soundX / 4,
      t: 1
    };
    to = {
      c: (this.index * 25) + this.soundX / 4,
      t: 0
    };
    this.twSound = new TWEEN.Tween(from).to(to, this.soundX);
    this.twSound.easing(function(t) {
      var b;

      b = Math.exp(-t * 10) * Math.cos(Math.PI * 2 * t * 10);
      if (t >= 1) {
        return 1;
      }
      return 1 - b;
    });
    it = this;
    this.twSound.onStart(function() {
      var _ref1;

      _this.oscillator.connect(_this.o.context.destination);
      return (_ref1 = _this.oscillator) != null ? _ref1.noteOn(0) : void 0;
    });
    this.twSound.onUpdate(function() {
      return it.oscillator.frequency.value = this.c;
    });
    this.twSound.onComplete(function() {
      return _this.teardown();
    });
    return this.twSound.start();
  };

  String.prototype.teardown = function() {
    var _ref;

    if ((_ref = this.oscillator) != null) {
      _ref.disconnect();
    }
    this.base.segments[0].handleOut.x = 0;
    this.base.segments[0].handleOut.y = 0;
    this.anima = false;
    this.touched = false;
    return this.base.strokeColor = this.defaultColor;
  };

  return String;

})();

Strings = (function() {
  function Strings(o) {
    this.initialOffset = 100;
    this.strings = [];
    this.stringWidth = 25;
    this.context = new webkitAudioContext();
    this.makeStrings();
    this.makebase();
  }

  Strings.prototype.makebase = function() {
    this.base = new Path.Circle([-100, -100], this.stringWidth);
    this.base.fillColor = '#FFF';
    return this.base.opacity = .25;
  };

  Strings.prototype.mouseMove = function(e) {
    return this.base.position = e.point;
  };

  Strings.prototype.makeStrings = function(cnt) {
    var i, string, _i, _results;

    if (cnt == null) {
      cnt = 15;
    }
    _results = [];
    for (i = _i = 0; 0 <= cnt ? _i < cnt : _i > cnt; i = 0 <= cnt ? ++_i : --_i) {
      string = new String({
        offset: this.initialOffset + (i * this.stringWidth * 3),
        width: this.stringWidth,
        context: this.context
      });
      string.index = i;
      _results.push(this.strings.push(string));
    }
    return _results;
  };

  Strings.prototype.makeQuake = function() {
    var i, string, _i, _len, _ref, _results;

    _ref = this.strings;
    _results = [];
    for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
      string = _ref[i];
      _results.push(string.animate());
    }
    return _results;
  };

  Strings.prototype.changeStrings = function(point) {
    var i, string, _i, _len, _ref, _results;

    _ref = this.strings;
    _results = [];
    for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
      string = _ref[i];
      _results.push(string.change(point));
    }
    return _results;
  };

  Strings.prototype.teardown = function() {
    var i, string, _i, _len, _ref, _results;

    TWEEN.removeAll();
    _ref = this.strings;
    _results = [];
    for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
      string = _ref[i];
      _results.push(string.teardown());
    }
    return _results;
  };

  return Strings;

})();

strings = new Strings;

onFrame = function(e) {
  return TWEEN.update();
};

onMouseDrag = function(e) {
  strings.changeStrings(e);
  strings.mouseMove(e);
  return mouseDrag = e.point;
};

onMouseDown = function(e) {
  strings.teardown();
  return mouseDown = e.point;
};

onMouseUp = function(e) {
  return strings.makeQuake();
};

onMouseMove = function(e) {
  mouseMove = e.point;
  return strings.mouseMove(e);
};
